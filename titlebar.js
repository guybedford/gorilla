// Generated by CoffeeScript 1.6.2
/*

TitleBar Component
Allows any content in regions - not a safe component for user options
Should be encapsulated further

Options
-------
  title: region / text string for H1 implied
  left: region
  right: region
*/


(function() {
  define(function(require) {
    var $, $z, QueueState, TitleSections;

    require('css!./titlebar');
    $ = require('amdquery!morpheus,bonzo');
    $z = require('zest');
    QueueState = require('./queuestate');
    return $z.create([$z.Component, QueueState], {
      options: {
        title: '',
        left: '',
        right: '',
        tDuration: 500
      },
      className: 'titlebar',
      render: "<header>\n  {`TitleSections`}\n</header>",
      TitleSections: TitleSections = {
        load: function(o) {
          if (typeof o.title === 'string' && o.title.substr(0, 1) !== '@' && o.title.substr(0, 1) !== '<') {
            o.title = '<h1 class="title">' + $z.esc(o.title, 'htmlText') + '</h1>';
          }
          if (o["new"]) {
            o["new"] = ' new';
          } else {
            o["new"] = '';
          }
          o.leftHTML = o.left ? "<div class=\"title-left" + o["new"] + "\">{`left`}</div>" : '';
          return o.rightHTML = o.right ? "<div class=\"title-right" + o["new"] + "\">{`right`}</div>" : '';
        },
        render: function(o) {
          return "" + o.leftHTML + "\n<div class=\"title-center" + o["new"] + "\">{`title`}</div>\n" + o.rightHTML;
        }
      },
      pipe: ['tDuration'],
      construct: function(el, o) {
        this.resetState();
        return this.$el = $(el);
      },
      _queueStates: ['slideLeft', 'slideRight', 'set'],
      prototype: {
        _slide: function(newState, right) {
          var titleWidth,
            _this = this;

          titleWidth = this.$el.dim().width;
          newState["new"] = true;
          return $z.render(TitleSections, newState, this.el, function() {
            var newTitleCenter, newTitleLeft, newTitleRight;

            newTitleLeft = $('.title-left.new', _this.el);
            newTitleCenter = $('.title-center.new', _this.el);
            newTitleRight = $('.title-right.new', _this.el);
            newTitleLeft.animate({
              opacity: 1,
              duration: _this.o.tDuration
            });
            _this.titleLeft.animate({
              opacity: 0,
              duration: _this.o.tDuration
            });
            _this.titleCenter.css({
              transform: "translate(0px, 0px)",
              left: 0,
              top: 0,
              position: 'absolute',
              width: '100%',
              opacity: 1
            }).addClass('boxsize');
            if (right) {
              _this.titleCenter.animate({
                transform: "translate(" + titleWidth + "px, 0px)",
                opacity: 0,
                duration: _this.o.tDuration
              });
              newTitleCenter.css({
                transform: "translate(-" + titleWidth + "px, 0px)"
              });
              newTitleCenter.animate({
                transform: "translate(0px, 0px)",
                opacity: 1,
                duration: _this.o.tDuration
              });
            } else {
              _this.titleCenter.animate({
                transform: "translate(-" + titleWidth + "px, 0px)",
                opacity: 0,
                duration: _this.o.tDuration
              });
              newTitleCenter.css({
                transform: "translate(" + titleWidth + "px, 0px)"
              });
              newTitleCenter.animate({
                transform: "translate(0px, 0px)",
                opacity: 1,
                duration: _this.o.tDuration
              });
            }
            newTitleRight.animate({
              opacity: 1,
              duration: _this.o.tDuration
            });
            return _this.titleRight.animate({
              opacity: 0,
              duration: _this.o.tDuration,
              complete: function() {
                newTitleLeft.removeClass('new');
                newTitleCenter.removeClass('new');
                newTitleRight.removeClass('new');
                return _this.resetState();
              }
            });
          });
        },
        resetState: function() {
          if (this.titleLeft && this.titleLeft.length) {
            $z.dispose(this.titleLeft);
          }
          if (this.titleRight && this.titleRight.length) {
            $z.dispose(this.titleRight);
          }
          if (this.titleCenter) {
            $z.dispose(this.titleCenter);
          }
          this.titleLeft = $('.title-left', this.el);
          this.titleCenter = $('.title-center', this.el);
          this.titleRight = $('.title-right', this.el);
          return this.popQueue();
        },
        slideLeft: function(newState) {
          return this._slide(newState, false);
        },
        slideRight: function(newState) {
          return this._slide(newState, true);
        },
        set: function(newState) {
          var _this = this;

          $z.dispose(this.el.childNodes);
          newState["new"] = true;
          return $z.render(TitleSections, newState, this.el, function() {
            return _this.resetState();
          });
        }
      }
    });
  });

}).call(this);
